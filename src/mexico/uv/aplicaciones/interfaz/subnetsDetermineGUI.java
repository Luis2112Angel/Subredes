package mexico.uv.aplicaciones.interfaz;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Luis Angel
 */
public class subnetsDetermineGUI extends javax.swing.JInternalFrame {

    /**
     * Creates new form GUISubredes
     */

    public subnetsDetermineGUI() {
        initComponents();
        configureTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtIP1 = new javax.swing.JTextField();
        txtIP2 = new javax.swing.JTextField();
        txtIP3 = new javax.swing.JTextField();
        txtIP4 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        labelHostSubredes = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtClass = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtMask = new javax.swing.JTextField();
        btoCalculate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSubredes = new javax.swing.JTable();
        btoClean = new javax.swing.JButton();
        btoHostSubnets = new javax.swing.JButton();
        txtSubnets = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Calculo de subredes");

        jLabel1.setText("Direccion IP: ");

        jLabel2.setText(".");

        jLabel3.setText(".");

        jLabel4.setText(".");

        labelHostSubredes.setText("Numero de subred: ");

        jLabel6.setText("Clase: ");

        jLabel7.setText("Mascara: ");

        txtMask.setEditable(false);

        btoCalculate.setText("Calcular");
        btoCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btoCalculateActionPerformed(evt);
            }
        });

        tableSubredes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableSubredes);

        btoClean.setText("Limpiar");
        btoClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btoCleanActionPerformed(evt);
            }
        });

        btoHostSubnets.setText("Subredes");
        btoHostSubnets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btoHostSubnetsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtIP1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIP2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIP3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtIP4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelHostSubredes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSubnets, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtClass, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btoCalculate, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(btoClean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btoHostSubnets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(27, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMask, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(19, 19, 19))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(btoCalculate))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelHostSubredes)
                    .addComponent(btoClean)
                    .addComponent(txtSubnets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btoHostSubnets))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtMask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btoCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btoCalculateActionPerformed
        calculateSubnets();
    }//GEN-LAST:event_btoCalculateActionPerformed

    private void btoHostSubnetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btoHostSubnetsActionPerformed
        if (btoHostSubnets.getText().equals("Subredes")) {
            btoHostSubnets.setText("Host");
            labelHostSubredes.setText("Numero de host: ");
        } else {
            btoHostSubnets.setText("Subredes");
            labelHostSubredes.setText("Numero de subredes: ");
        }
    }//GEN-LAST:event_btoHostSubnetsActionPerformed

    private void btoCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btoCleanActionPerformed
        // TODO add your handling code here:
        txtIP1.setText("");
        txtIP2.setText("");
        txtIP3.setText("");
        txtIP4.setText("");
        txtSubnets.setText("");
        txtClass.setText("");
        txtMask.setText("");
    }//GEN-LAST:event_btoCleanActionPerformed
    //Method to calculate subnets
    private void calculateSubnets() {
        if (btoHostSubnets.getText().equals("Subredes")) {
            fillTableSubnets(findHiddenNumberSubnet());
        } else if (btoHostSubnets.getText().equals("Host")) {
            fillTableHost(findHiddenNumberHost());
        }
        assignClass();
    }
    
    //Method to configure the table
    private void configureTable() {
        TableModel model = new DefaultTableModel(new String[]{"ID", "Subred", "Rango de IP disponibles", "Red de broadcast"}, 5) {
            @Override
            public boolean isCellEditable(int i, int il) {
                return false;
            }
        };
        this.tableSubredes.setModel(model);
    }
    
    //Method that fills the table with the calculated subnets
    private void fillTableSubnets(int num) {
        int numSubnets = Integer.parseInt(txtSubnets.getText());
        TableModel model = new DefaultTableModel(new String[]{"ID", "Subred", "Rango de IP disponibles", "Red de broadcast"}, numSubnets) {
            @Override
            public boolean isCellEditable(int i, int il) {
                return false;
            }
        };
        int ip = 0;
        for (int count = 0; count < numSubnets; count++) {
            model.setValueAt(String.valueOf(count + 1), count, 0);
            model.setValueAt(String.valueOf((txtIP1.getText() + "." + txtIP2.getText() + "." + txtIP3.getText() + "." + String.valueOf(ip))), count, 1);
            model.setValueAt(String.valueOf((txtIP1.getText() + "." + txtIP2.getText() + "." + txtIP3.getText() + "." + String.valueOf(ip + 1)) + " - " + (txtIP1.getText() + "." + txtIP2.getText() + "." + txtIP3.getText() + "." + String.valueOf(ip + num - 2))), count, 2);
            model.setValueAt(String.valueOf((txtIP1.getText() + "." + txtIP2.getText() + "." + txtIP3.getText() + "." + String.valueOf(ip + num - 1))), count, 3);
            TableColumnModel columnModel = tableSubredes.getColumnModel();
            columnModel.getColumn(0).setPreferredWidth(25);
            columnModel.getColumn(1).setPreferredWidth(100);
            columnModel.getColumn(2).setPreferredWidth(150);
            columnModel.getColumn(3).setPreferredWidth(100);
            ip = ip + num;
            if (ip > 255) {
                break;
            }
        }
        this.tableSubredes.setModel(model);
    }
    
    //Method that fills the table with the subnets calculated with the method that is per host
    private void fillTableHost(int num) {
        TableModel model = new DefaultTableModel(new String[]{"ID", "Subred", "Rango de IP disponibles", "Red de broadcast"}, 255) {
            @Override
            public boolean isCellEditable(int i, int il) {
                return false;
            }
        };
        int ip = 0;
        int c = 1;
        for (int count = 0; count < c; count++) {
            model.setValueAt(String.valueOf(count + 1), count, 0);
            model.setValueAt(String.valueOf((txtIP1.getText() + "." + txtIP2.getText() + "." + txtIP3.getText() + "." + String.valueOf(ip))), count, 1);
            model.setValueAt(String.valueOf((txtIP1.getText() + "." + txtIP2.getText() + "." + txtIP3.getText() + "." + String.valueOf(ip + 1)) + " - " + (txtIP1.getText() + "." + txtIP2.getText() + "." + txtIP3.getText() + "." + String.valueOf(ip + num - 2))), count, 2);
            model.setValueAt(String.valueOf((txtIP1.getText() + "." + txtIP2.getText() + "." + txtIP3.getText() + "." + String.valueOf(ip + num - 1))), count, 3);
            ip = ip + num;
            TableColumnModel columnModel = tableSubredes.getColumnModel();
            columnModel.getColumn(0).setPreferredWidth(25);
            columnModel.getColumn(1).setPreferredWidth(100);
            columnModel.getColumn(2).setPreferredWidth(150);
            columnModel.getColumn(3).setPreferredWidth(100);
            if (ip > 255) {
                break;
            } else {
                c++;
            }
        }
        this.tableSubredes.setModel(model);
    }
    
    //Method that assigns the mask given the class
    private void assignClass() {
        if (txtClass.getText().equals("A")) {
            txtMask.setText("255.0.0.0");
        }
        if (txtClass.getText().equals("B")) {
            txtMask.setText("255.255.0.0");
        }
        if (txtClass.getText().equals("C")) {
            txtMask.setText("255.255.255.0");
        }

    }
    
    //Method that finds the number hidden with subnets
    private int findHiddenNumberSubnet() {
        int numSubnets = Integer.parseInt(txtSubnets.getText());
        int value = 0;
        int count = 0;
        for (count = 1; count < 9; count++) {
            if ((Math.pow(2, count)) >= numSubnets) {
                value = count;
                break;
            }
        }
        String[] mask = txtMask.getText().split(".");
        String binary;
        binary = Integer.toBinaryString(255);
        char[] arrayBinary = binary.toCharArray();
        for (int c = 0; c < arrayBinary.length; c++) {
            if (c < value) {
                arrayBinary[c] = '1';
            } else {
                arrayBinary[c] = '0';
            }
        }
        binary = String.valueOf(arrayBinary);
        int num = Integer.parseInt(binary, 2);
        int hiddenNumber = 256 - num;
        return hiddenNumber;
    }
    
    //Method that finds the number hidden with host
    private int findHiddenNumberHost() {
        int numberHost = Integer.parseInt(txtSubnets.getText());
        int value = 0;
        int count = 0;
        for (count = 1; count < 9; count++) {
            if ((Math.pow(2, count) - 2) >= numberHost) {
                value = count;
                break;
            }
        }
        String[] mask = txtMask.getText().split(".");
        String binary;
        binary = Integer.toBinaryString(255);
        char[] arrayBinary = binary.toCharArray();
        value = 8 - value;
        for (int c = 0; c < arrayBinary.length; c++) {
            if (c < value) {
                arrayBinary[c] = '1';
            } else {
                arrayBinary[c] = '0';
            }
        }
        binary = String.valueOf(arrayBinary);
        int num = Integer.parseInt(binary, 2);
        int numberHidden = 256 - num;
        return numberHidden;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton btoCalculate;
    protected javax.swing.JButton btoClean;
    protected javax.swing.JButton btoHostSubnets;
    protected javax.swing.JLabel jLabel1;
    protected javax.swing.JLabel jLabel2;
    protected javax.swing.JLabel jLabel3;
    protected javax.swing.JLabel jLabel4;
    protected javax.swing.JLabel jLabel6;
    protected javax.swing.JLabel jLabel7;
    protected javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JLabel labelHostSubredes;
    protected javax.swing.JTable tableSubredes;
    protected javax.swing.JTextField txtClass;
    protected javax.swing.JTextField txtIP1;
    protected javax.swing.JTextField txtIP2;
    protected javax.swing.JTextField txtIP3;
    protected javax.swing.JTextField txtIP4;
    protected javax.swing.JTextField txtMask;
    protected javax.swing.JTextField txtSubnets;
    // End of variables declaration//GEN-END:variables
}
