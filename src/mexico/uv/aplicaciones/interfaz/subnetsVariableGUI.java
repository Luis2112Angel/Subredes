package mexico.uv.aplicaciones.interfaz;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Luis Angel
 */
public class subnetsVariableGUI extends javax.swing.JInternalFrame {

    /**
     * Creates new form GUISubredes
     */

    public subnetsVariableGUI() {
        initComponents();
        configureTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtIP1 = new javax.swing.JTextField();
        txtIP2 = new javax.swing.JTextField();
        txtIP3 = new javax.swing.JTextField();
        txtIP4 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        labelHostSubredes = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtClass = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtMask = new javax.swing.JTextField();
        btoCalculate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSubredes = new javax.swing.JTable();
        btoLimpiar = new javax.swing.JButton();
        txtSubnets = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Calculo de subredes");

        jLabel1.setText("Direccion IP: ");

        jLabel2.setText(".");

        jLabel3.setText(".");

        jLabel4.setText(".");

        labelHostSubredes.setText("Numero de subred: ");

        jLabel6.setText("Clase: ");

        jLabel7.setText("Mascara: ");

        txtMask.setEditable(false);

        btoCalculate.setText("Calcular");
        btoCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btoCalculateActionPerformed(evt);
            }
        });

        tableSubredes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableSubredes);

        btoLimpiar.setText("Limpiar");
        btoLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btoLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMask, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtIP1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIP2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIP3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtIP4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelHostSubredes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSubnets, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtClass, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btoLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btoCalculate, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(btoCalculate))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelHostSubredes)
                    .addComponent(btoLimpiar)
                    .addComponent(txtSubnets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtMask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btoCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btoCalculateActionPerformed
        calculateSubnets();
    }//GEN-LAST:event_btoCalculateActionPerformed

    private void btoLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btoLimpiarActionPerformed
        // TODO add your handling code here:
        txtIP1.setText("");
        txtIP2.setText("");
        txtIP3.setText("");
        txtIP4.setText("");
        txtSubnets.setText("");
        txtClass.setText("");
        txtMask.setText("");
    }//GEN-LAST:event_btoLimpiarActionPerformed

    TableModel model = new DefaultTableModel(new String[]{"ID", "Subred", "Rango de IP disponibles", "Red de broadcast", "Mascara"}, 6) {
        @Override
        public boolean isCellEditable(int i, int il) {
            return false;
        }
    };

    int ip;
    int mask;

    //Method to calculate subnets
    private void calculateSubnets() {
        int numberSubents = Integer.parseInt(txtSubnets.getText());
        int[] hosts = new int[numberSubents];
        for (int count = 0; count < numberSubents; count++) {
            hosts[count] = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el numero de host de la red " + (count + 1)));
        }
        for (int x = 0; x < hosts.length; x++) {
            for (int count = 0; count < hosts.length - x - 1; count++) {
                if (hosts[count] < hosts[count + 1]) {
                    int valueTemporal = hosts[count + 1];
                    hosts[count + 1] = hosts[count];
                    hosts[count] = valueTemporal;
                }
            }
        }
        ip = 0;
        for (int count = 0; count < numberSubents; count++) {
            if (recoverIP() > 255) {
                break;
            }
            fillTable(findNumberHiddenHost(hosts[count]), count, recoverIP(), mask);
        }

        assingClass();
    }

    //Method to configure table
    private void configureTable() {
        TableModel model = new DefaultTableModel(new String[]{"ID", "Subred", "Rango de IP disponibles", "Red de broadcast", "Mascara"}, 6) {
            @Override
            public boolean isCellEditable(int i, int il) {
                return false;
            }
        };
        this.tableSubredes.setModel(model);
    }

    //Method to save the ip
    private void saveIP(int ip) {
        this.ip = ip;
    }

    //Method to get the ip
    private int recoverIP() {
        return ip;
    }

    //Method to fill table after calculate subnets
    private void fillTable(int num, int i, int ip, int mask) {
        model.setValueAt(String.valueOf(i + 1), i, 0);
        model.setValueAt(String.valueOf((txtIP1.getText() + "." + txtIP2.getText() + "." + txtIP3.getText() + "." + String.valueOf(ip))), i, 1);
        model.setValueAt(String.valueOf((txtIP1.getText() + "." + txtIP2.getText() + "." + txtIP3.getText() + "." + String.valueOf(ip + 1)) + " - " + (txtIP1.getText() + "." + txtIP2.getText() + "." + txtIP3.getText() + "." + String.valueOf(ip + num - 2))), i, 2);
        model.setValueAt(String.valueOf((txtIP1.getText() + "." + txtIP2.getText() + "." + txtIP3.getText() + "." + String.valueOf(ip + num - 1))), i, 3);
        model.setValueAt(String.valueOf("/" + mask), i, 4);
        TableColumnModel columnModel = tableSubredes.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(25);
        columnModel.getColumn(1).setPreferredWidth(100);
        columnModel.getColumn(2).setPreferredWidth(150);
        columnModel.getColumn(3).setPreferredWidth(100);
        columnModel.getColumn(4).setPreferredWidth(25);
        ip = ip + num;
        saveIP(ip);
        this.tableSubredes.setModel(model);
    }

    //Method to asign the mask according on the class
    private void assingClass() {
        if (txtClass.getText().equals("A")) {
            txtMask.setText("255.0.0.0");
        }
        if (txtClass.getText().equals("B")) {
            txtMask.setText("255.255.0.0");
        }
        if (txtClass.getText().equals("C")) {
            txtMask.setText("255.255.255.0");
        }
    }

    //Method to find the number hidden by host
    private int findNumberHiddenHost(int numberHost) {
        if (txtClass.getText().equals("A")) {
            mask = 8;
        }
        if (txtClass.getText().equals("B")) {
            mask = 16;
        }
        if (txtClass.getText().equals("C")) {
            mask = 24;
        }
        int value = 0;
        int count = 0;
        for (count = 1; count < 9; count++) {
            if ((Math.pow(2, count) - 2) >= numberHost) {
                value = count;
                break;
            }
        }
        String[] arrayMask = txtMask.getText().split(".");
        String binary;
        binary = Integer.toBinaryString(255);
        char[] arrayBinary = binary.toCharArray();
        value = 8 - value;
        for (int c = 0; c < arrayBinary.length; c++) {
            if (c < value) {
                arrayBinary[c] = '1';
                mask++;
            } else {
                arrayBinary[c] = '0';
            }
        }
        binary = String.valueOf(arrayBinary);
        int num = Integer.parseInt(binary, 2);
        int numberHidden = 256 - num;
        return numberHidden;
    }

    //Method to get the number of subnets
    private int getNumberSubnets() {
        int numberSubnets = Integer.parseInt(txtSubnets.getText());
        return numberSubnets;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton btoCalculate;
    protected javax.swing.JButton btoLimpiar;
    protected javax.swing.JLabel jLabel1;
    protected javax.swing.JLabel jLabel2;
    protected javax.swing.JLabel jLabel3;
    protected javax.swing.JLabel jLabel4;
    protected javax.swing.JLabel jLabel6;
    protected javax.swing.JLabel jLabel7;
    protected javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JLabel labelHostSubredes;
    protected javax.swing.JTable tableSubredes;
    protected javax.swing.JTextField txtClass;
    protected javax.swing.JTextField txtIP1;
    protected javax.swing.JTextField txtIP2;
    protected javax.swing.JTextField txtIP3;
    protected javax.swing.JTextField txtIP4;
    protected javax.swing.JTextField txtMask;
    protected javax.swing.JTextField txtSubnets;
    // End of variables declaration//GEN-END:variables
}
